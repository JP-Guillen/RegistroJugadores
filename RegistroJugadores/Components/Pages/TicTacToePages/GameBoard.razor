@page "/Gameboar/Index"
@using Microsoft.EntityFrameworkCore
@using RegistroJugadores.DAL
@inject MovimientosService movimientosService
@inject NavigationManager navigationManager
@inject IDbContextFactory<Contexto> DbFactory
@rendermode InteractiveServer

<!-- PANTALLA DE JUEGO -->
<div class="game-screen">
    <h2 class="game-status">@GameStatus</h2>

    <div class="game-board">
        @for (var i = 0; i < 9; i++)
        {
            var cellIndex = i;
            <button class="cell @GetPlayerClass(board[cellIndex])"
                    @onclick="async () => await HandleCellClick(cellIndex)"
                    disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                @board[cellIndex]?.ToString()
            </button>
        }
    </div>

    <button class="btn btn-secondary mt-4" @onclick="RestartGame">
        Reiniciar Juego
    </button>
</div>

@code {
    private enum PlayerType { X, O }

    private bool gameStarted;
    private PlayerType? playerTypeSelection;
    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType? winner;
    private bool esEmpate;


    [Parameter]
    [SupplyParameterFromQuery]
    public string jugadorX { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string jugadorO { get; set; }


    private string NombreJugadorActual =>
        _currentPlayerType == PlayerType.X ? jugadorX : jugadorO;


    private string GameStatus
    {
        get
        {
            if (winner != null)
            {
                var nombreGanador = winner == PlayerType.X ? jugadorX : jugadorO;
                return $"🏆 ¡Ganador: {nombreGanador}!";
            }

            return esEmpate
                ? "🤝 ¡Es un empate!"
                : $"Turno de: {NombreJugadorActual}";
        }
    }

    private void SelectPlayerType(PlayerType playerType)
    {
        playerTypeSelection = playerType;
        StateHasChanged();
    }

    private void SelectPlayerX()
    {
        playerTypeSelection = PlayerType.X;
    }

    private void StartGame()
    {
        if (playerTypeSelection.HasValue)
        {
            gameStarted = true;
        }
    }

    private async Task ActualizarResultado()
    {
        await using var contexto = await DbFactory.CreateDbContextAsync();

        var jugadorXEntity = await contexto.Jugadores.FirstOrDefaultAsync(j => j.Nombres == jugadorX);
        var jugadorOEntity = await contexto.Jugadores.FirstOrDefaultAsync(j => j.Nombres == jugadorO);

        if (jugadorXEntity != null && jugadorOEntity != null)
        {
            if (winner == PlayerType.X)
            {
                jugadorXEntity.Victorias++;
                jugadorOEntity.Derrotas++;
            }
            else if (winner == PlayerType.O)
            {
                jugadorOEntity.Victorias++;
                jugadorXEntity.Derrotas++;
            }
            else if (esEmpate)
            {
                jugadorXEntity.Empates++;
                jugadorOEntity.Empates++;
            }

            await contexto.SaveChangesAsync();
        }
    }

    private async Task RegistrarPartida()
    {
        await using var contexto = await DbFactory.CreateDbContextAsync();

        var jugadorXEntity = await contexto.Jugadores.FirstOrDefaultAsync(j => j.Nombres == jugadorX);
        var jugadorOEntity = await contexto.Jugadores.FirstOrDefaultAsync(j => j.Nombres == jugadorO);

        if (jugadorXEntity == null || jugadorOEntity == null) return;

        var partida = new Partidas
        {
            Jugador1Id = jugadorXEntity.JugadorId,
            Jugador2Id = jugadorOEntity.JugadorId,
            GanadorId = winner switch
            {
                PlayerType.X => jugadorXEntity.JugadorId,
                PlayerType.O => jugadorOEntity.JugadorId,
                _ => null
            },
            EstadoPartida = winner != null ? "Finalizada" : esEmpate ? "Empate" : "Incompleta",
            TurnoJugadorId = _currentPlayerType == PlayerType.X ? jugadorXEntity.JugadorId : jugadorOEntity.JugadorId,
            EstadoTablero = string.Join("", board.Select(cell => cell?.ToString() ?? "-")),
            FechaInicio = DateTime.UtcNow,
            FechaFin = DateTime.UtcNow
        };

        contexto.partidas.Add(partida);
        await contexto.SaveChangesAsync();
    }





    private async Task HandleCellClick(int index)
    {
        if (board[index] != null || winner != null || esEmpate)
        {
            return;
        }

        board[index] = _currentPlayerType;

        winner = CheckForWinner();
        if (winner != null)
        {
            await RegistrarPartida();
            await ActualizarResultado();
            return;
        }

        esEmpate = board.All(cell => cell != null);
        if (esEmpate)
        {
            await RegistrarPartida();
            await ActualizarResultado();
            return;
        }


        _currentPlayerType = (_currentPlayerType == PlayerType.X)
            ? PlayerType.O
            : PlayerType.X;
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
            new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},
            new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},
            new[] {0, 4, 8}, new[] {2, 4, 6}
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }

        return null;
    }

    private void RestartGame()
    {
        gameStarted = false;
        playerTypeSelection = null;
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }


}
