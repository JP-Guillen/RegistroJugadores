@page "/Jugadores/Index"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager

<PageTitle>Consulta de Jugadores</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header space-between">
            <h5 class="card-title">Consulta de Jugadores</h5>
            <a href="/Jugadores/Create" class="btn btn-success"> <span class="bi bi-plus-square mt-3"></span> Crear</a>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>

                <div class="col-4">
                    <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        <option value="Nombre">Nombre</option>
                        <option value="Partidas">Partidas</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        <button type="button" class="btn btn-outline-secondary ms-1" @onclick="Restablecer"><i class="bi bi-arrow-clockwise"></i></button>
                    </div>
                </div>
            </div>

            <table class="table table-hover mt-3">
                <thead class="table  table-striped text-black">
                    <tr>
                        <th>JugadorId</th>
                        <th>Nombres</th>
                        <th>Partidas</th>
                        <th>Editar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var jugador in ListaJugadores)
                    {
                        <tr>
                            <td>@jugador.Idjugador</td>
                            <td>@jugador.Nombre</td>
                            <td>@jugador.Partidas</td>
                            <td class="text-center">
                                <a href="/Jugadores/Edit/@jugador.Idjugador" class="btn btn-outline-primary bi bi-pencil-square"></a>
                            </td>
                            <td class="text-center">
                                <button class="btn btn-outline-danger bi bi-trash" @onclick="() => Eliminar(jugador.Idjugador)"></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresService.Listar(j => j.Idjugador > 0);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {
            if (Filtro == "Nombre")
            {
                ListaJugadores = await jugadoresService.Listar(j => j.Nombre.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else if (Filtro == "Partidas" && int.TryParse(ValorFiltro, out int partidas))
            {
                ListaJugadores = await jugadoresService.Listar(j => j.Partidas == partidas);
            }
        }
        else
        {
            ListaJugadores = await jugadoresService.Listar(j => j.Idjugador > 0);
        }
    }

    private async Task Restablecer()
    {
        ListaJugadores = await jugadoresService.Listar(j => j.Idjugador > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }

    private async Task Eliminar(int jugadorId)
    {
        var eliminado = await jugadoresService.Eliminar(jugadorId);
        if (eliminado)
        {
            ListaJugadores = await jugadoresService.Listar(j => j.Idjugador > 0);
        }
    }
}
