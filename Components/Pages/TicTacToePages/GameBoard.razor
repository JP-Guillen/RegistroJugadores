@page "/Gameboar/Index"
@using Microsoft.EntityFrameworkCore
@using RegistroJugadores.DAL
@using RegistroJugadoresResource
@using RegistroJugadores.Models.ApiDtos;
@inject NavigationManager navigationManager
@inject IDbContextFactory<Contexto> DbFactory
@inject IMovimientosApiService movimientosApiService
@rendermode InteractiveServer

<div class="game-screen">
    <h2 class="game-status">@GameStatus</h2>

    <div class="game-board">
        @for (var i = 0; i < 9; i++)
        {
            var cellIndex = i;
            <button class="cell @GetPlayerClass(board[cellIndex])"
                    @onclick="async () => await HandleCellClick(cellIndex)"
                    disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                @board[cellIndex]?.ToString()
            </button>
        }
    </div>

    <button class="btn btn-secondary mt-4" @onclick="RestartGame">
        Reiniciar Juego
    </button>
</div>

@code {
    private enum PlayerType { X, O }

    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType? winner;
    private bool esEmpate;

    private System.Timers.Timer? _timer;

    [Parameter]
    [SupplyParameterFromQuery]
    public int partidaId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string simbolo { get; set; }

    private string GameStatus
    {
        get
        {
            if (winner != null)
                return $"🏆 ¡Ganó {winner}!";
            if (esEmpate)
                return "🤝 ¡Empate!";
            return $"Turno de: {_currentPlayerType}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (partidaId > 0)
        {
            await CargarMovimientosDesdeApi();
            _timer = new System.Timers.Timer(2000);
            _timer.Elapsed += async (_, _) => await ActualizarTableroPeriodicamente();
            _timer.AutoReset = true;
            _timer.Enabled = true;
        }
    }

    private async Task CargarMovimientosDesdeApi()
    {
        try
        {
            var result = await movimientosApiService.GetMovimientosAsync(partidaId);

            if (result is Resource<List<MovimientosResponse>>.Success ok)
            {
                var movimientos = ok.Data;

                // limpiar tablero
                board = new PlayerType?[9];

                // pintar jugadas desde la API
                foreach (var mov in movimientos)
                {
                    int index = (mov.PosicionFila * 3) + mov.PosicionColumna;
                    if (index >= 0 && index < 9)
                        board[index] = mov.Jugador == "X" ? PlayerType.X : PlayerType.O;
                }

                _currentPlayerType = movimientos.Count % 2 == 0 ? PlayerType.X : PlayerType.O;

                winner = CheckForWinner();
                esEmpate = !winner.HasValue && board.All(cell => cell != null);

                await InvokeAsync(StateHasChanged);
            }
            else if (result is Resource<List<MovimientosResponse>>.Error err)
            {
                Console.WriteLine($"Error al cargar movimientos: {err.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar movimientos desde la API: {ex.Message}");
        }
    }


    private async Task ActualizarTableroPeriodicamente()
    {
        await CargarMovimientosDesdeApi();
    }

    private async Task HandleCellClick(int index)
    {
        if (board[index] != null || winner != null || esEmpate)
            return;

            if ((_currentPlayerType == PlayerType.X && simbolo != "X") ||
            (_currentPlayerType == PlayerType.O && simbolo != "O"))
            return;

            var fila = index / 3;
        var columna = index % 3;

        var request = new RegistroJugadores.Models.ApiDtos.MovimientosRequest
        {
            PartidaId = partidaId,
            Jugador = simbolo,
            PosicionFila = fila,
            PosicionColumna = columna
        };

            await movimientosApiService.PostMovimientoAsync(request);

    
        await CargarMovimientosDesdeApi();
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
            new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},
            new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},
            new[] {0, 4, 8}, new[] {2, 4, 6}
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
                return board[a];
        }

        return null;
    }

    private void RestartGame()
    {
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
